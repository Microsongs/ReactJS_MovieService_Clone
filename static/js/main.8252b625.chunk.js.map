{"version":3,"sources":["Movie.js","App.js","index.js"],"names":["Movie","year","title","summary","poster","genres","className","src","alt","map","genre","index","key","slice","App","state","isLoading","movies","getMovies","a","axios","get","data","console","log","setState","this","movie","id","medium_cover_image","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gTAoCeA,MAhCf,YAAuD,IAAvCC,EAAsC,EAAtCA,KAAMC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,QAASC,EAAgB,EAAhBA,OAAQC,EAAQ,EAARA,OAI1C,OACA,yBAAKC,UAAU,SACX,yBAAKC,IAAKH,EAAQI,IAAKN,EAAOA,MAAOA,IACrC,yBAAKI,UAAU,eACX,wBAAIA,UAAU,gBAAgBJ,GAC9B,wBAAII,UAAU,eAAeL,GAC7B,wBAAIK,UAAU,iBACTD,EAAOI,KAAI,SAACC,EAAOC,GAAR,OACR,wBAAIC,IAAKD,EAAOL,UAAU,iBAAiBI,OAGnD,uBAAGJ,UAAU,kBAAkBH,EAAQU,MAAM,EAAE,KAA/C,UC4DGC,G,kNAtEbC,MAAQ,CACNC,WAAY,EAEZC,OAAQ,I,EAIVC,U,sBAAY,8BAAAC,EAAA,sEASAC,IAAMC,IACd,2DAVQ,gBAMCJ,EAND,EAKRK,KACEA,KAAOL,OAMXM,QAAQC,IAAIP,GAKZ,EAAKQ,SAAS,CAAER,SAAQD,WAAU,IAjBxB,2C,kEAsBVU,KAAKR,c,+BAIC,MAEsBQ,KAAKX,MAA1BC,EAFD,EAECA,UAAWC,EAFZ,EAEYA,OAGlB,OACE,6BAASX,UAAU,cAChBU,EAGC,yBAAKV,UAAU,UACb,0BAAMA,UAAU,gBAAhB,eAMF,yBAAKA,UAAU,UACZW,EAAOR,KAAI,SAAAkB,GAAK,OACf,kBAAC,EAAD,CACEf,IAAOe,EAAMC,GACbA,GAAMD,EAAMC,GACZ3B,KAAQ0B,EAAM1B,KACdC,MAASyB,EAAMzB,MACfC,QAAWwB,EAAMxB,QACjBC,OAAUuB,EAAME,mBAChBxB,OAAUsB,EAAMtB,kB,GA7DdyB,IAAMC,YCHxBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,a","file":"static/js/main.8252b625.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Movie.css\";\r\n\r\nfunction Movie({year, title, summary, poster, genres}){\r\n    // JS에서 css를 사용하기 위해서는 style={{}}으로 해주어야 한다.\r\n    // 보통은 css파일을 만들어서 사용한다.\r\n    // label for HTML속성이 있지만, js에서는 for은 loop이므로 혼동될 수 있어 htmlFor으로 사용\r\n    return(\r\n    <div className=\"movie\">\r\n        <img src={poster} alt={title} title={title} />\r\n        <div className=\"movie__data\">\r\n            <h3 className=\"movie__title\">{title}</h3>\r\n            <h5 className=\"movie__year\">{year}</h5>\r\n            <ul className=\"movie__genres\">\r\n                {genres.map((genre, index) => (\r\n                    <li key={index} className=\"genres__genre\">{genre}</li>\r\n                ))}\r\n            </ul>\r\n            <p className=\"movie__summary\">{summary.slice(0,180)}...</p>\r\n        </div>\r\n    </div>\r\n    );\r\n}\r\n\r\n// 우리가 얻어 올 Property를 찾는 방법\r\nMovie.propTypes = {\r\n    // id, title, summary, poster를 가져옴\r\n    id: PropTypes.number.isRequired,\r\n    year : PropTypes.number.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n    summary: PropTypes.string.isRequired,\r\n    poster: PropTypes.string.isRequired,\r\n    genres: PropTypes.arrayOf(PropTypes.string).isRequired\r\n};\r\n\r\nexport default Movie;","import React from \"react\";\nimport axios from \"axios\";\nimport Movie from \"./Movie\";\nimport \"./App.css\";\n\n// App은 React Component이다. -> React Component는 뒤에 많은 것을 가지고 있다.\n// React Component를 상속받아 사용\nclass App extends React.Component{\n  // application을 mount하자마자 mount는 생겨나는 것, 태어나는 것, 살아나는 것 이다.\n  state = {\n    isLoading : true,\n    // 후에 movie를 채울 array\n    movies: []\n  };\n\n  // 이 함수가 비동기라고 설정 -> 이것을 기다려야 한다.\n  getMovies = async() => {\n    //const movies = await axios.get(\"http://yts-proxy.now.sh/list_movies.json\");\n    //console.log(movies.data.data.movies);\n    // 위와 동일하게 사용\n    const {\n      data: {\n        data: {movies}\n      }\n      // rating별로 정의하기 위해 json파일 뒤에 sort by rating을 추가\n    } = await axios.get(\n      \"http://yts-proxy.now.sh/list_movies.json?sort_by=rating\"\n      );\n    console.log(movies);\n    \n    //state에 불러온 movies데이터를 넣어준다.\n    // 앞의 movies는 state, 뒤의 movies는 axios\n    // this.setState({movies:movies})를 다음과 같이 표현 가능\n    this.setState({ movies, isLoading:false });\n  }\n  \n  // Component가 mount되자마자 실행되는 함수\n  componentDidMount(){\n    this.getMovies();\n  }\n\n  // react는 모든 class Component의 render함수를 자동으로 사용한다.\n  render(){\n    // this.state.isLoading\n    const {isLoading, movies} = this.state;\n    // 랜더링 방법 1. -> renerMovies라는 함수를 생성하여 사용 2. 그냥 있는 것을 그대로 불러와서 사용\n    // HTML에서의 class는 css의 class이지만, javaScript에서는 js의 class와 혼동될 수 있으므로 className을 사용한다.\n    return(\n      <section className=\"containter\">\n        {isLoading ? \n        // isLoading을 기준으로 로딩중일 경우 Loading...을 호출 아닐 경우 로딩화면을 송출\n        (\n          <div className=\"loader\">\n            <span className=\"loader__text\">Loading...</span>\n          </div>\n        ) \n          :\n        // movies를 movie에 넣는다. \n        (\n          <div className=\"movies\">\n            {movies.map(movie => (\n              <Movie\n                key = {movie.id}\n                id = {movie.id}\n                year = {movie.year}\n                title = {movie.title}\n                summary = {movie.summary}\n                poster = {movie.medium_cover_image}\n                genres = {movie.genres}\n              />\n            ))}\n          </div>\n        )}\n      </section>\n    )\n  }\n}\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('potato')\n);\n"],"sourceRoot":""}